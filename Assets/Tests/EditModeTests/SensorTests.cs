
using System.Collections;
using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;
using ExplodotechUtils;

public class TestSensor : SensorGeneric
{
    public bool detected = true;
    protected override bool DetectObject(GameObject obj)
    {
        return detected;
    }
}


public class SensorTest
{
    [Test]
    public void TestNumberOfPointsGenerated()
    {
        /*
        * Method: CalculateCone
        *
        * Make sure the number of points/vertices generated by the CalculateCone method is correct!
        * We want the number to be the correct one and the number of vertices and points to be identical!
        *
        * It should work for any number of subcones!
        */
        Vector3 org = Vector3.zero;
        int var = Random.Range(5, 100);

        float directionAngle = 0f;
        float fov = 30f;
        int rayCount = var;
        float sensorRange = 1;

        Vector3[] result3 = new Vector3[1];
        Vector2[] result2 = new Vector2[1];

        (result3, result2) = SensorUtils.CalculateCone(org, directionAngle, fov, rayCount, sensorRange);

        Assert.AreEqual(result2.Length, result3.Length);
        Assert.AreEqual(rayCount + 2, result3.Length);

    }
    [Test]
    public void TestCorrectOutputTypes()
    {
        /*
        * Method: CalculateCone
        *
        * Make sure the generated points/vertices are of type Vector2 nad Vector3 respectively!
        */
        Vector3 org = Vector3.zero;

        float directionAngle = 0f;
        float fov = 30f;
        int rayCount = 5;
        float sensorRange = 1;

        Vector3[] result3 = new Vector3[1];
        Vector2[] result2 = new Vector2[1];

        (result3, result2) = SensorUtils.CalculateCone(org, directionAngle, fov, rayCount, sensorRange);

        for (int i = 0; i > result3.Length; i++)
        {
            Assert.IsInstanceOf<Vector2>(result2[i]);
            Assert.IsInstanceOf<Vector3>(result3[i]);
        }

    }

    [Test]
    public void TestVectorLength()
    {
        /*
        * Method: CalculateCone
        *
        * Make sure all points/vertices have the correct distance from the origin!
        */

        Vector3 org = Vector3.zero;

        float directionAngle = 0f;
        float fov = 30f;
        int rayCount = 5;
        float sensorRange = 1;

        Vector3[] result3 = new Vector3[1];
        Vector2[] result2 = new Vector2[1];

        (result3, result2) = SensorUtils.CalculateCone(org, directionAngle, fov, rayCount, sensorRange);

        for (int i = 1; i < result3.Length; i++)
        {
            Assert.AreEqual(sensorRange, result3[i].magnitude);
            Debug.Log(result3[i]);
        }

        sensorRange = 2;

        (result3, result2) = SensorUtils.CalculateCone(org, directionAngle, fov, rayCount, sensorRange);

        for (int i = 1; i < result3.Length; i++)
        {
            Assert.AreEqual(sensorRange, result3[i].magnitude);
            Debug.Log(result3[i]);
        }
    }

    [Test]
    public void DetectObject_HasEmitter()
    {
        /*
        * Method: DetectObject
        *
        * 
        */

        // ARRANGE
        // #################
        SensorGeneric sensor = new SensorGeneric();

        // Create a GameObject without an Emitter - should NOT be detected!
        GameObject mockObjectWithoutEmitter = new GameObject("TargetShip");

        // Create a GameObject WITH an Emitter - should be detected!
        GameObject mockObjectWithEmitter = new GameObject("TargetShip2");
        GameObject childEmitter = new GameObject("Emitter");
        childEmitter.AddComponent<Emitter>();
        childEmitter.transform.parent = mockObjectWithEmitter.transform;

        sensor.ObjectsInCone.Add(mockObjectWithoutEmitter);
        sensor.ObjectsInCone.Add(mockObjectWithEmitter);

        // ACT
        sensor.Scan();

        Assert.AreEqual(1, sensor.DetectedObjects.Count);

        // CLEANUP
        Object.DestroyImmediate(mockObjectWithoutEmitter);
        Object.DestroyImmediate(mockObjectWithEmitter);
    }

    [Test]
    public void ScanAddsObjectsToDetectedList()
    {
        /*
        * Make sure all detected Objects are added to the DetectedObjects list
        */

        // ARRANGE
        TestSensor sensor = new TestSensor();
        sensor.detected = true; // Make sure that "DetectObject always returns true.

        // Create a GameObjects to populate the ConeList
        GameObject mockObjectWithEmitter1 = new GameObject("TargetShip1");
        GameObject childEmitter1 = new GameObject("Emitter");
        childEmitter1.AddComponent<Emitter>();

        GameObject mockObjectWithEmitter2 = new GameObject("TargetShip2");
        GameObject childEmitter2 = new GameObject("Emitter");
        childEmitter2.AddComponent<Emitter>();

        sensor.ObjectsInCone.Add(mockObjectWithEmitter1);
        sensor.ObjectsInCone.Add(mockObjectWithEmitter2);

        // ACT
        sensor.Scan();

        // EVALUATE
        Assert.AreEqual(2, sensor.DetectedObjects.Count);

        // CLEANUP
        Object.DestroyImmediate(mockObjectWithEmitter1);
        Object.DestroyImmediate(mockObjectWithEmitter2);

    }

    [Test]
    public void ScanAddsNoDoubles()
    {
        /*
        * Make sure no Object is appears in the DetectedObjects list more than once!
        */

        // ARRANGE
        TestSensor sensor = new TestSensor();
        sensor.detected = true; // Make sure that "DetectObject always returns true.

        // Create a GameObjects to populate the ConeList
        GameObject mockObjectWithEmitter1 = new GameObject("TargetShip1");
        GameObject childEmitter1 = new GameObject("Emitter");
        childEmitter1.AddComponent<Emitter>();

        GameObject mockObjectWithEmitter2 = new GameObject("TargetShip2");
        GameObject childEmitter2 = new GameObject("Emitter");
        childEmitter2.AddComponent<Emitter>();

        sensor.ObjectsInCone.Add(mockObjectWithEmitter1);
        sensor.ObjectsInCone.Add(mockObjectWithEmitter2);

        // ACT
        sensor.Scan();
        sensor.Scan();

        // EVALUATE
        Assert.AreEqual(2, sensor.DetectedObjects.Count);

        // CLEANUP
        Object.DestroyImmediate(mockObjectWithEmitter1);
        Object.DestroyImmediate(mockObjectWithEmitter2);

    }

    [Test]
    public void ScanRemovesObjectsNoDetection()
    {
        /*
        * Make sure that are no longer detected ar removed from the list
        */

        // ARRANGE
        TestSensor sensor = new TestSensor();
        sensor.detected = false; // Make sure that "DetectObject always returns false.

        // Create a GameObjects to populate the ConeList
        GameObject mockObjectWithEmitter1 = new GameObject("TargetShip1");
        GameObject childEmitter1 = new GameObject("Emitter");
        childEmitter1.AddComponent<Emitter>();

        GameObject mockObjectWithEmitter2 = new GameObject("TargetShip2");
        GameObject childEmitter2 = new GameObject("Emitter");
        childEmitter2.AddComponent<Emitter>();

        sensor.ObjectsInCone.Add(mockObjectWithEmitter1);
        sensor.ObjectsInCone.Add(mockObjectWithEmitter2);

        sensor.DetectedObjects.Add(mockObjectWithEmitter1);
        sensor.DetectedObjects.Add(mockObjectWithEmitter2);

        // ACT
        sensor.Scan();

        // EVALUATE
        Assert.AreEqual(0, sensor.DetectedObjects.Count);

        // CLEANUP
        Object.DestroyImmediate(mockObjectWithEmitter1);
        Object.DestroyImmediate(mockObjectWithEmitter2);

    }

    [Test]
    public void ScanRemovesObjectsOutOfCone()
    {
        /*
        * Make sure that are no longer in the cone are removed from the list
        */

        // ARRANGE
        TestSensor sensor = new TestSensor();
        sensor.detected = true; // Make sure that "DetectObject always returns true.

        // Create a GameObjects to populate the ConeList
        GameObject mockObjectWithEmitter1 = new GameObject("TargetShip1");
        GameObject childEmitter1 = new GameObject("Emitter");
        childEmitter1.AddComponent<Emitter>();

        GameObject mockObjectWithEmitter2 = new GameObject("TargetShip2");
        GameObject childEmitter2 = new GameObject("Emitter");
        childEmitter2.AddComponent<Emitter>();

        sensor.ObjectsInCone.Add(mockObjectWithEmitter1);
        //sensor.ObjectsInCone.Add(mockObjectWithEmitter2);

        sensor.DetectedObjects.Add(mockObjectWithEmitter1);
        sensor.DetectedObjects.Add(mockObjectWithEmitter2);

        // ACT
        sensor.Scan();

        // EVALUATE
        Assert.AreEqual(1, sensor.DetectedObjects.Count);

        // CLEANUP
        Object.DestroyImmediate(mockObjectWithEmitter1);
        Object.DestroyImmediate(mockObjectWithEmitter2);

    }

}
